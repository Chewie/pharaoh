name: ci
on: [push, pull_request]

env:
  APP_NAME: pharaoh

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings



  test:
    name: Test
    strategy:
      fail-fast: false
      # FIXME: there is no easy way to run integration tests for the ARM target
      # since the hosted runners are only x86_64.
      # While this removes some coverage, those tests are disabled for now.
      matrix:
        build:
          - linux
          - macos
          #- linux-arm
        include:
          - build: linux
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
          - build: macos
            os: macos-11
            target: x86_64-apple-darwin
          #- build: linux-arm
            #os: ubuntu-20.04
            #target: arm-unknown-linux-gnueabihf
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: 1
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --target=${{ matrix.target }}



  create-release:
    name: Create release
    # Skip for now, to test it out
    if: startsWith(github.ref, 'refs/tags/')
    needs: ['test', 'lint']
    runs-on: ubuntu-20.04
    # Only use this for tests
    #env:
      #RELEASE_VERSION: TEST_0.0.0
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      release_version: ${{ steps.get_version.outputs.release_version }}
    steps:
      - name: Get the release version from the tag
        if: env.RELEASE_VERSION == ''
        id: get_version
        run: echo ::set-output name=release_version::${GITHUB_REF#ref/tags/}
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.release_version }}
          release_name: ${{ steps.get_version.outputs.release_version }}



  build-release:
    name: Build releases
    needs: ['create-release']
    strategy:
      matrix:
        build:
          - linux
          - linux-arm
          - macos
        include:
          - build: linux
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
          - build: linux-arm
            os: ubuntu-20.04
            target: arm-unknown-linux-gnueabihf
          - build: macos
            os: macos-11
            target: x86_64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target=${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/${{ env.APP_NAME }}"

      - name: Strip release binary (arm)
        if: matrix.build == 'linux-arm'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:arm-unknown-linux-gnueabihf \
            arm-linux-gnueabihf-strip \
            "/target/arm-unknown-linux-gnueabihf/release/${{ env.APP_NAME }}"

      - name: Upload release binary
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: "target/${{ matrix.target }}/release/${{ env.APP_NAME }}"
          asset_name: "${{ env.APP_NAME }}-${{ needs.create-release.outputs.release_version }}-${{ matrix.target }}"
          asset_content_type: application/octet-stream
